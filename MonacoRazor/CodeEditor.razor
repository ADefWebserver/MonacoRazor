@using MonacoRazor
@inject IJSRuntime JS
@implements IAsyncDisposable
<style>
    .monacoEditor {
    @style
    }
</style>

<div class="monacoEditor" @ref="element"></div>

@code {
    [Parameter] public string Language { get; set; }
    [Parameter] public string Code { get; set; }
    [Parameter] public string Height { get; set; }
    [Parameter] public string Width { get; set; }
    [Parameter] public string Border { get; set; }
    [Parameter] public string Margin { get; set; }
    [Parameter] public string MinHeight { get; set; }
    [Parameter] public EventCallback<string> CodeChanged { get; set; }
    [Parameter] public Func<string, Position, Task<Suggestion[]>> OnCompletionsRequested { get; set; }

    private DotNetObjectReference<CodeEditor> thisReference;
    private ElementReference element;
    private readonly Lazy<Task<IJSObjectReference>> moduleTask;
    private string style = "";

    public CodeEditor()
    {
        thisReference = DotNetObjectReference.Create(this);
        moduleTask = new(() => JS.InvokeAsync<IJSObjectReference>(
           "import", "./_content/SimpleBlazorMonaco/main.js").AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await moduleTask.Value;
            await module.InvokeVoidAsync("init", element, thisReference, Language ?? "csharp", Code);
        }
    }

    // Paramaters set
    protected override void OnParametersSet()
    {
        // Set Style
        Code = Code ?? string.Empty;
        Height = Height ?? "300px";
        Width = Width ?? "100%";
        Border = Border ?? "2px solid gray";
        Margin = Margin ?? "1em 0";
        MinHeight = MinHeight ?? "300px";

        style = $"height: {Height}; width: {Width}; border: {Border}; margin: {Margin}; min-height: {MinHeight};";
    }

    public async Task UpdateCodeAsync(string code)
    {
        var module = await moduleTask.Value;
        await module.InvokeVoidAsync("updateValue", element, thisReference, code);
    }

    public async Task<string> GetCodeAsync()
    {
        var module = await moduleTask.Value;
        return await module.InvokeAsync<string>("getValue", element);
    }

    [JSInvokable]
    public Task HandleEditorBlur(string newValue)
    {
        return CodeChanged.InvokeAsync(newValue);
    }

    [JSInvokable]
    public Task<Suggestion[]> GetCompletions(string value, Position position)
        => OnCompletionsRequested?.Invoke(value, position);

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        thisReference.Dispose();
        if (moduleTask.IsValueCreated)
        {
            var module = await moduleTask.Value;
            await module.DisposeAsync();
        }
    }
}